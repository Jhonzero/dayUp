
















----------------------abstract code demo----------------------

1-抽象处理者（abstract handler）
public abstract class Handler{
  private Handler nextHandler;
  //每个处理者都必须对请求做出处理
  public final Response hadleMessage(Request request) {
    Response response = null;
    //判断是否是自己的处理级别
    if（this.getHandlerLevel().equals(request.getRequestLevel())）{
        response = this.echo(request);
    }else {//不属于自己的处理级别
        //判断是否有下一个处理者
        if（this.nextHandler != null） {
            response = this.nextHandler.handleMessage(request);
        }else {
            //没有适当的处理者，业务自行处理
        }
    }
    return response;
  }
  
  //设置下一个处理者
  public void setNext(Handler _handler) {
      this.nextHandler = _handler;
  }
  
  //每个处理者都有一个处理级别
  protected abstract level getHandlerLevel();
  //每个处理者都必须实现处理任务
  protected abstract Response echo(Request request);

}

2-具体处理者（concrete handler）
public class ConcreteHnadler1 extens Handler {
    //定义自己的处理逻辑
    protected Response echo(Request request) {
        //完成处理逻辑
        return null;
    }
    
    //设置自己的处理级别
    protected Level getHandlerLevel(){
        //设置自己的处理级别
        return null;
    }
 }
 
 public class ConcreteHnadler2 extens Handler {
    //定义自己的处理逻辑
    protected Response echo(Request request) {
        //完成处理逻辑
        return null;
    }
    
    //设置自己的处理级别
    protected Level getHandlerLevel(){
        //设置自己的处理级别
        return null;
    }
 }
 
 public class ConcreteHnadler3 extens Handler {
    //定义自己的处理逻辑
    protected Response echo(Request request) {
        //完成处理逻辑
        return null;
    }
    
    //设置自己的处理级别
    protected Level getHandlerLevel(){
        //设置自己的处理级别
        return null;
    }
 }

3-模式中有关框架代码

public class Level {
    //定义一个请求和处理等级
}

public class Request {
    //请求的等级
    public Level getRequestLevel() {
        return null;
    }
}

public class Response() {
    //处理者返回的数据
}


4--场景类
public class Client {
    public static void main(String[] args) {
        //声明所有的处理节点
        Handler handler1 = new ConcreteHandler1();
        Handler handler2 = new ConcreteHandler2();
        Handler handler3 = new ConcreteHandler3();
        //设置链中的阶段顺序 1-->2-->3
        handler1.setNext(handler2);
        handler2.setNext(handler3);
        
    }
}
