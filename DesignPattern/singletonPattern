

一、定义（Singleton Pattern）
	Ensure a class has only one instance, and provide a global point of access to it.
	(确保某一个类只有一个实例，而且自行实例化并想整个系统提供这个实例。)





二、结构
1、引入案例：皇帝臣子


2、通用类图



3、



三、优缺点
1、优点
1）由于单例模式在内存中只有一个实例，减少了内存开支。特别是在一个对象需要频繁地创建、销毁时，而且创建或销毁时性能有无法优化。优势很明显。
2）由于单利模式只生成一个实例，所以减少了性能开销。
3）单例模式可以避免对资源的多重占用。
4）单例模式可以设置全局的访问点，优化和共享资源访问。
【注】
	总结下来就是，单例模式只有一个实例，对资源（内存，处理器时间等）占用小，从而提升性能。
	同时，由于是全局的，可以共享，以及其它的优势。
	

2、缺点
1）单例模式没有接口，扩展很困难。
2）单例模式对测试是不利的。
3）单例模式与单一职责原则冲突。
	单例模式把“要单例”和业务逻辑融合在一个类中。


四、关注点

1、适用场景
1）要求生成唯一序列号的环境
2）在整个项目中需要一个共享访问点和共享数据。
3）创建一个对象需要消耗的资源过多。
4）需要定义大量的静态常量和静态方法的环境。（或者声明为 static）
【注】Spring 中的单例模式
	Spring中，每个Bean 默认就是单例的，优点：Spring容器可以管理这些Bean 的生命周期，何时创建、销毁以及如何处理等
	如果采用非单例（Prototype类型），则Bean初始化后的管理交由J2EE容器，Spring容器不在跟踪管理。

2、扩展
1）懒汉式
2）饿汉式
3）双重校验锁
4）

）有数量上线的多例模式。


3、注意事项
	1）高并发情况下，注意单例模式的线程同步问题。
	2）其次，需要考虑对象的复制问题。
		Java中，对象默认是不可复制的。若实现了Cloneable 接口，并实现clone 方法，则可以进行复制。
		【解决】单例类直接不要是实现 Cloneable 接口。



4、对设计原则的遵守和破坏


5、特性
-- 自行实例化，且只有一个实例。







-------------code  demo----------------

1- 引入案例code
package junz.designPattern.singletonPattern;

public class Emperor {

	private static final Emperor emperor = new Emperor();
	//constructor
	private Emperor() {
		//
	}
	
	//get the instance
	public static Emperor getInstance() {
		return emperor;
	}
	
	//say()
	public static void say() {
		System.out.println("I am the QinSH");
	}
	
}


package junz.designPattern.singletonPattern;

public class Minister {

	//
	public static void main(String[] args) {
		for(int day=0; day<3; day++) {
			Emperor emperor = Emperor.getInstance();
			emperor.say();
		}
	}
}

--------------扩展code--------------







