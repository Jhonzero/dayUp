













The normal code demo of Proxy Pattern （代理模式的通用代码逻辑示例）

1、abstract subject  抽象主题类
public interface Subjcet {
    //define a method
    public void request();
}

2、realSubject  真实主题类
public class RealSubject implements Subject {
    //implements
    public void request(){
      //business handling
    }
}

3、the proxy 代理类
public class proxy implements Subject {
    //which class to be proxy
    private Subject subject = null;
    //the default proxy
    public Proxy(){
        this.subject = new Proxy();
    }
    
    //constructor
    public Proxy(Object...objecets) {
    
    }
    
    //implement the method defined in the interface
    public void request(){
        this.before();
        this.subject.request();
        this.after();
    }
    
    //preHandle
    private void request() {
        //do something
    }
    
    //after handle
    private void after(){
        //do something
    }
}


-------------------DynamicProxy---------------------------------
The normal code demo of Dynamic Proxy（动态代理的通用代码逻辑示例）

1、abstract subject
public interface Subject{
    //business operation
    public void doSomething(String str);
}

2、 real subject 
public class RealSubject implements Subjcet {
    //business operation
    public void doSomething(String str) {
        system.out.println("do something ..." + str);
}

3、the handler class of dynamicProxy
public class MyInvocationHandler implements InvocationHandler {
    //proxy object
    private Object target = null;
    //deliver a object by the constructor
    public MyInvocationHandler(Objcet _obj) {
        this.target = _obj;
    }
    //proxy method
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        //run the proxy method
        return method.invoke(this.target, args);
    }
}

3、dynamicProxy
public class DynamicProxy<T> {
    public static <T> T newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) {
       //find joinPoint, defined in AOP
       if(true) {
            //do an operation : preAdvice
            (new BeforeAdvice()).exec();
       }
       //operate the taret, return the result
       return (T)Proxy.newProxyInstance(Loader, interface, h);
    }

}

4、the interface of advice
public interface IAdvice {
    //only one method in the advice, just run it
    public void exec();
}

public class BeforeAdvice implements IAdvice {
    public void exec() {
        system.out.println("i am the preAdvice, i am operated!");
    }
}   

5、the scene of the dynamic proxy
public class Client{
    public static void main(String[] args) {
        //define a subjcet
        Subject subject = new RealSubject();
        //define a handler
        InvocationHandler handler = new MyInvocationHadler(subject);
        //define the proxy of the subject
        Subject proxy = DynaminProxy.newProxyInstance(subject.getClass().getClassLoader(), subject.getClass().getInterfaces(), handler);
        //the behavior of the proxy
        proxy.doSomething("finish");
    }
}   

-------improved-------
The step 4、5 can be improved  by add a new subjectDynamicProxy class
5、SubjcetDynamicProxy
public class SubjectDynamicProxy extends DynamicProxy{
    public static <T> T newProxyInstance(Subject subject) {
        //get the classLoader
        ClassLoader loader = subject.getClass().getClassLoader();
        //get the array of interfaces
        Class<?>[] classes = subject.getClass().getInterfaces();
        //get the handler
        InvocationHandler handler = new MyInvocationHandler(Subject);
        return newProxyInstance(loader, classes, handler);
    }
}

6、 Client
public class Client {
    public static void main(String[] args) {
        //define a subjcet
        Subject subject = new RealSubject();
        //define the proxy
        Subject proxy = SubjectDynamicProxy.newProxyInstance(subjcet);
        //business handle
        proxy.doSomething();
    }
}

