

一、null 的理解​
 
1、null 在Java 语言中扮演着特殊的角色。
 
1）代表对象状态，此时 null 说明对象只是声明还没有分配内存。null 既不是对象也不是一种类型，仅仅是一种特殊的值。
2）null 是大小写敏感的，只能是 null 这种写法，否则编译器会报错
3）null 是所有引用类型的默认值

2、出现空指针的常见情形
1）访问 null 对象的 非静态变量、非静态方法（静态变量和静态方法都能够访问且不报异常）
【注】个人理解：静态的变量或者方法和非静态变量、方法存储不在同一内存区。静态的变量、方法的可见性是包内可见的，也就是包内共享的。而非静态的而仅是类自身可见。当对象为 null 时，自身的非静态变量、方法并没有进行内存分配，只是进行了声明，在调用时就会出现找不到资源的问题，即空指针异常了。静态的变量和方法，由于在初次创建时已经分配了内存并且由于可见性需求会一直存在，所以即便对象为 null,再次访问时依然能够获取到值。
2）对 null 对象的进行同步
3）访问 null array 的元素、长度属性（length）
    //access the null-array-length or element   will lead to NullPointerException
		int[] aaa = null;
		System.out.println("null array length: "+aaa.length);
		System.out.println("null array element: "+aaa[1]);

 
二、不同类型的值的默认初始值
1、基本类型
1）boolean false
2）int 0
3
 
 
2、基本类型的包装类
如 Integer， int 类型的包装类，也是引用类型，默认值为null

3、String
null
 
4、数组 array
null
 
5、集合
null

三、判别
 
1、Java 中 null 的比较可以通过  == 和 !=  来进行。但不能通过其他的逻辑运算符比较。
      Java 中的  null == null 返回 true。
2、对于数组array，通常在使用时，除了判定 是否为 null 以外还会结合 array.length > 0 来判定数组内是否真的存在元素，以免在访问元素时未留意而出现 数组下标越界异常。
3、对于集合 collection，通常除了判定 是否为null 以外会结合 collection.size() > 0 来判定集合内是否有元素。
 【注】集合中的 size() 方法是在内部维护了一个 size 的变量，该变量跟踪集合的结构变化（添加或者删除）来更新自身的大小，保证是最新的。
 
 
四、尝试
 
1、instanceof 检测 null，将会返回false
 
System.out.println((null instanceof Integer));//false
System.out.println((null instanceof String));//false
 
2、null 可以赋予任何引用类型，也可以将 null 转换为任何类型。
【注】编译时不会报错，在运行时也不会抛出空指针异常
String str = null;
Integer ii = null;
Double dd = null;
 
String myStr = (String)null;
Integer myI = (Integer)null;
Double myD = (Double)null;
 
3、null 值不能赋予基本类型变量
将 null 赋值给 基本类型，如int, boolean, double 等，编译不通过。
编译器会提示进行类型强转为基本类型的包装类。
 
【注1】将null 值赋值给 基本的类型的包装类型（Object类型），然后将包装类型赋值给对应的基本类型，编译器不会报错，但是在运行时会抛出空指针异常。
-- 这是Java 中的自动拆箱机制导致。也就是null 不能赋值给基本类型变量
Integer ii = null;
int aa = ii;
System.out.println(aa);//抛出NullPointerException
【注2】将null 值赋给基本类型的包装类，然后打印输出，和使用引用类型没有区别，返回null
Integer ii = null;
System.out.println(ii);
 
4、任何含有 null 值的包装类在Java 拆箱生成基本数据类型的时候都会抛出一个空指针异常。
示例：
/**
	 * HashMap 中 Integer 作为键 使用
	 */
	public static void hashMapWithInt() {
		Map numberAndCount = new HashMap();
		int[] numbers = {3, 5, 7, 9, 11, 13, 15, 17, 2, 3, 5, 33, 12, 5};
		
		//iterate
		for(int i : numbers) {
			System.out.println(i);
			//the value of HashMap's get(i) is null, 
			//while unboxing to the base type int, throwing the NullPointerException 
			int count = (int)numberAndCount.get(i);
			System.out.println(count);
			numberAndCount.put(i, count++);
		}
	}
/**
	 * 自动拆箱
	 */
	public static void hashMapWithInteger() {
		Map numberAndCount = new HashMap();
		Integer[] numbers = {3, 5, 7, 9, 11, 13, 15, 17, 2, 3, 5, 33, 12, 5};
		
		//iterate
		for(Integer i : numbers) {
			System.out.println(i);
			//the value of HashMap's get(i) is null, 
			//while unboxing to the base type int, throwing the NullPointerException 
			Integer count = (Integer)numberAndCount.get(i);
			System.out.println(count);
			/*
			 * count 此时虽然为包装类型，但是在执行 count++ 的时候依然会进行自动拆箱。
			 * 此时的count 为null, 自动拆箱时将 null 传递给 int 类型，抛出空指针异常
			 */
			numberAndCount.put(i, count++);
		}
	}
5、调用非静态方法来使用一个值为 null 的引用类型变量。会抛出空指针异常。
      使用静态变法来使用一个值为 null 的以引用类型变量，不会抛出空指针异常，因为静态方法使用静态绑定。

    public static void main(String[] args) {
		VarType myObj = null;
		myObj.theStaticMethod();
		myObj.theNotStaticMethod();//这里抛出空指针异常
	}
	public static void theStaticMethod() {
		System.out.println("This is the static method.");
	}
	public void theNotStaticMethod() {
		System.out.println("This is not the static method.");
	}













 
 
 











