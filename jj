

一、Java 内存模型

【注】关注点
1）线程相关性
2）异常类型
3）结构特点
4）特性
5）调节参数
6）创建时机

【注2】
	在任意时刻，一条Java虚拟机线程只会执行一个方法的代码，这个正在被线程执行的方法称为当前方法。
	如果方法为 native 的，则pc 寄存器就保存Java虚拟机正在执行的字节码指令的地址
	如果方法是native 的，则 值为 undefined。

1、PC 计数器
	-- 
	-- 线程相关，与线程同时创建（线程独有的）
	--  
	-- 
2、Java虚拟机栈
	-- 用于存储栈帧
		-- 栈帧可以在堆中分配
		--
	-- 线程相关，线程私有的。
	--   Java虚拟机栈使用的内存不需要保证是连续的
	--   除了栈帧的出栈和入栈外，Java虚拟机栈不会再受其他因素影响
	--
	-- 异常
		-- 如果线程请求分配的栈容量超过 Java 虚拟机栈允许的最大容量时， Java 虚拟机将会抛出一
		个 StackOverflowError 异常。 
		--   如果 Java 虚拟机栈可以动态扩展，并且扩展的动作已经尝试过，但是目前无法申请到足够的
		内存去完成扩展，或者在建立新的线程时没有足够的内存去创建对应的虚拟机栈，那 Java 虚
		拟机将会抛出一个 OutOfMemoryError 异常 
		 
	--
	--
	
	
3、Java 堆
	--
	-- 内存共享区域
	--  异常
		-- 如果实际所需的堆超过了自动内存管理系统能提供的最大容量，那 Java 虚拟机将会抛出一个
		OutOfMemoryError 异常。 

4、方法区
	-- 运行时常量池
		--（在类或接口加载到虚拟机后即创建）
		--  是一个类或接口常量池的运行时表示形式
		--  异常
			-- 当创建类或接口的时候，如果构造运行时常量池所需要的内存空间超过了方法区所能提供的最
			大值，那 Java 虚拟机将会抛出一个 OutOfMemoryError 异常。 
		--
		
	--  线程共享的运行时内存区域
	-- 存储每个类的结构信息（如运行时常量池、字段和方法数据、构造函数和普通方法的字节码内容等）
	-- 方法区实际内存可以不连续
	-- 虚拟机启动时创建
	-- 异常
		-- 如果方法区的内存空间不能满足内存分配请求，那 Java 虚拟机将抛出一个
		OutOfMemoryError 异常 


5、本地方法栈
	--
	-- native


二、

1、栈帧
-- 用来存储数据和部分过程结果
-- 栈帧随着方法调用而创建，随着方法结束而销毁（无论方法是正常还是异常完成）
-- 每个栈帧都有自己的局部变量表、操作数栈 和 指向当前方法所属的类的运行时常量池的引用
--（注）对局部变量表和操作数栈的各种操作都是指对当前栈帧的 局部变量表和操作数栈进行的操作

1）局部变量表

2）操作数栈（当前栈帧的操作数栈）
	-- 随栈帧建立时为空
	-- 操作数栈有确定的栈深度（long 和 double占两个单位的栈深度，其他类型一个单位深度）
	-- 操作数栈中的数据必须被正确操作（指操作数栈的操作必须与操作数栈栈顶的数据类型相匹配）

3）动态链接
	-- 在class 文件里面，描述一个方法调用了其他方法或者访问其成员变量是通过符号引用来表示的。
	-- 动态链接的作用就是将这些符号引用所表示的方法转换为实际方法的直接引用。
	

4）方法正常调用完成
	-- 
	-- 当前栈帧承担回复调用者状态的责任，状态包括  调用者的局部变量表、操作数栈和被正确增加过来表示执行了该方法调用指令的程序计数器等。
	-- 
	
5）方法异常调用完成
	-- 不会有任何返回


【舍入模式】
1）向最近数舍入： 即四舍五入
2）向零舍入         ： 即 去尾舍入
3）向正无穷舍入
4）向负无穷舍入


【浮点模式】
1）每个方法都有一项属性称为  浮点模式。取值有两种： FP-strict模式 或  非FP-strict模式
2）方法的 浮点模式取决于 class 文件中代表该方法的 method_info 结构的访问标志中的 ACC_STRICT 标志位的取值
3）一个操作数栈具有某种浮点模式时，所指的就是包含操作数栈的栈帧所对应的方法具备的浮点模式
	-- 类似，一条Java虚拟机字节码指令具备某种浮点模式，指的是 包含这条指令的方法具备的浮点模式


【数值集合转换】
1）定义： 一些场景，支持扩展指数集合的Java虚拟机实现数值在标准浮点数集合与扩展指数集合之间的映射关系是允许和必要的。这种映射操作就称为 数值集合转换。
-- 数值集合转换并非数据类型转换，而是在同一种数据类型之中不同数值集合的映射操作。
2）触发场景
3）转换策略


【异常】
1、Java虚拟机里的异常使用 Throwable 或其子类的实例来表示。抛异常的本质实际上是程序控制权的一种即时的、非局部的转换----- 从异常跑出转换到处理异常的地方
2、Java虚拟机中的异常情形
2.1 虚拟机同步检测到程序发生了非正常的执行情况。（这时异常会紧接着在发生非正常执行情况的字节码指令后抛出。）
	1）字节码指令所蕴含的操作违反了Java语言的语义
	2）类在加载或者链接时出现错误
	3）使用某些资源的时候产生资源限制。如使用太多内存。
2.2 athrow 字节码指令被执行
2.3 其他原因
	1）调用Thread 或者 ThreadGroup 的 stop 方法
	2） Java 虚拟机实现的内部程序错误。
 

【】
所有使用 NaN 值为操作数的算术操作，结果都返回 NaN

三、












