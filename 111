

一、关注点

1、历史（发展历史，创始人，里程碑时间表及重要贡献人物）
	1）创始人，姓名，经历
	2）创建的社会大环境
	3）语言的里程碑时间、版本，以及重要的贡献人物
	
2、特点（语言特色，类型，）
	1） 语言特色
	2）使用何种底层语言实现
	3）基于什么机制展示（解释型还是编译型）
		-- 解释型的 解释器 有哪些，其特点机制原理了解下
		-- 编译型的 编译器 有哪些，特点机制了解下
3、兼容性及适用场景
	1）是特定系统适用还是兼容多个操作系统？
	2）如果兼容读个操作系统的话，通过何种方式实现兼容性
	3）使用场景，哪些场合会用到
	
4、源码 和查看工具
	1）采用何用语言编写，属于底层语言的框架
	2）项目或者类库的包、工具类的源码
	3）使用哪种IDE 或者编辑工具，查看源码的工具有哪些

5、类和工具类库
	1）类库的格式，存储格式
	2）语言自带的类库，存放路径
	3）第三方的类库，存放路径
	4）工程的类库，存放规则
	5）工程的打包方式


6、语言框架
	1）基于该语言的框架有哪些，特点和使用场景，解决了什么问题
	2）

7、安装
	1）安装的方式（多个系统），结构及每个工程目录的功能作用
	2）环境变量的设置
	
8、语言规范
9、项目构建


	










关注点：

一、历史

1、起源，创始人
2、产生的环境
3、里程碑节点和重要贡献人物
4、


二、

1、特性
2、基本使用，安装、卸载、启动和关闭、配置等
3、
工作机制和原理

4、发布、订阅机制 是如何实现的？


三、扩展

1、不同MQ 之间的特性差异，原理差异，性能差异，操作成本差异等
2、MQ 的选型考量

四、

1、MQ 的应用场景
2、MQ 的如何实现分布式引用的解耦（松耦合）
3、



线程
	1、创建方式
		1-继承 Thread 类
		2-实现 Runnable 接口
	2、线程状态和上下文切换
		1-状态
			NEW
			RUNNABLE
				READY
				RUNNING
			BLOCKED
			WAITING
			TIMED_WAITING
			TERMINATED
		2-上下文切换
	3、特点（优缺点）
		1-特点
		2-优点
			提高系统的吞吐率
			提高响应性
			充分利用多核CPU资源
			最小化对系统资源的使用
			简化程序的结构
		3-风险
			线程安全问题
			线程的生命特征问题
			上下文切换
			可靠性
	4、常用术语
	分支主题 2
	重要概念
		常用术语
			任务（Task）
			并发（Concurrent）
			并行（Parallel）
			客户端线程
			工作者线程
			上下文切换
			显示锁
			线程安全
		1-子线程和父线程
		子主题 3
	分支主题 7
1、创建方式
	1-继承 Thread 类
	2-实现 Runnable 接口
2、线程状态和上下文切换
	1-状态
		NEW
		RUNNABLE
			READY
			RUNNING
		BLOCKED
		WAITING
		TIMED_WAITING
		TERMINATED
	2-上下文切换
3、特点（优缺点）
	1-特点
	2-优点
		提高系统的吞吐率
		提高响应性
		充分利用多核CPU资源
		最小化对系统资源的使用
		简化程序的结构
	3-风险
		线程安全问题
		线程的生命特征问题
		上下文切换
		可靠性
4、常用术语
分支主题 2
重要概念
	常用术语
		任务（Task）
		并发（Concurrent）
		并行（Parallel）
		客户端线程
		工作者线程
		上下文切换
		显示锁
		线程安全
	1-子线程和父线程
	子主题 3
分支主题 7


















